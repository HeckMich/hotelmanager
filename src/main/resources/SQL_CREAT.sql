DROP TABLE IF EXISTS INVOICE;

DROP TABLE IF EXISTS BOOKED_SERVICE;

DROP TABLE IF EXISTS WILL_ATTEND;

DROP TABLE IF EXISTS RESERVATION;

DROP TABLE IF EXISTS CAN_DO_SERVICE;

DROP TABLE IF EXISTS CAN_DO_MAINTENANCE;

DROP TABLE IF EXISTS SERVICE_TYPE;

DROP TABLE IF EXISTS PLANNED_MAINTENANCE;

DROP TABLE IF EXISTS MAINTENANCE_TYPE;

DROP TABLE IF EXISTS EMPLOYEE;

DROP TABLE IF EXISTS JOB;

DROP TABLE IF EXISTS EVENT;

DROP TABLE IF EXISTS GUEST;

DROP TABLE IF EXISTS PLZ;

DROP TABLE IF EXISTS ROOM;

CREATE TABLE ROOM (
	ROOM_NR INT NOT NULL, --In format 101, 102, 201, ... (no leading 0s)
	MAX_OCCUPANTS INT NOT NULL,
	COST DECIMAL(5, 2) NOT NULL,
	PRIMARY KEY (ROOM_NR)
);

CREATE TABLE EVENT (
	EVENT_ID SERIAL,
	NAME VARCHAR(100) NOT NULL,
	DATE DATE NOT NULL,
	PRIMARY KEY (EVENT_ID)
);

CREATE TABLE PLZ (
	PLZ VARCHAR(10) NOT NULL, -- Leading 0s (e.g. germany), up to 10 digits (e.g. USA)
	CITY VARCHAR(100) NOT NULL,
	PRIMARY KEY (PLZ)
);

CREATE TABLE GUEST (
	PLZ VARCHAR(10) NOT NULL,
	GUEST_ID SERIAL,
	LAST_NAME VARCHAR(50) NOT NULL,
	FIRST_NAME VARCHAR(50) NOT NULL,
	HOUSE_NUMBER INT NOT NULL,
	STREET VARCHAR(100) NOT NULL,
	PRIMARY KEY (GUEST_ID),
	FOREIGN KEY (PLZ) REFERENCES PLZ (PLZ)
);

CREATE TABLE RESERVATION (
	GUEST_ID INT NOT NULL,
	RESERVATION_ID SERIAL,
	START_DATE DATE NOT NULL,
	END_DATE DATE NOT NULL,
	ROOM_NR INT NOT NULL,
	PRIMARY KEY (RESERVATION_ID),
	FOREIGN KEY (GUEST_ID) REFERENCES GUEST (GUEST_ID),
	FOREIGN KEY (ROOM_NR) REFERENCES ROOM (ROOM_NR)
);

CREATE TABLE INVOICE (
	GUEST_ID INT NOT NULL,
	RESERVATION_ID INT NOT NULL,
	INVOICE_ID SERIAL,
	SUM DECIMAL(10, 2) NOT NULL,
	PRIMARY KEY (INVOICE_ID),
	FOREIGN KEY (GUEST_ID) REFERENCES GUEST (GUEST_ID),
	FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATION (RESERVATION_ID)
);

CREATE TABLE WILL_ATTEND (
	RESERVATION_ID INT NOT NULL,
	EVENT_ID INT NOT NULL,
	PRIMARY KEY (RESERVATION_ID, EVENT_ID),
	FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATION (RESERVATION_ID),
	FOREIGN KEY (EVENT_ID) REFERENCES EVENT (EVENT_ID)
);

CREATE TABLE MAINTENANCE_TYPE (
	M_TYPE_ID SERIAL,
	MAINTENANCE_TYPE VARCHAR(40) NOT NULL,
	PRIMARY KEY (M_TYPE_ID)
);

CREATE TABLE JOB (
	JOB_ID SERIAL,
	NAME VARCHAR(20) NOT NULL,
	PRIMARY KEY (JOB_ID)
);

CREATE TABLE CAN_DO_MAINTENANCE (
	JOB_ID INT NOT NULL,
	M_TYPE_ID INT NOT NULL,
	PRIMARY KEY (JOB_ID, M_TYPE_ID),
	FOREIGN KEY (JOB_ID) REFERENCES JOB (JOB_ID),
	FOREIGN KEY (M_TYPE_ID) REFERENCES MAINTENANCE_TYPE (M_TYPE_ID)
);

CREATE TABLE SERVICE_TYPE (
	SERVICE_ID SERIAL,
	NAME VARCHAR(30) NOT NULL,
	COST DECIMAL(5, 2) NOT NULL,
	PRIMARY KEY (SERVICE_ID)
);

CREATE TABLE EMPLOYEE (
	JOB_ID INT NOT NULL,
	EMPLOYEE_ID SERIAL,
	FIRST_NAME VARCHAR(20) NOT NULL,
	LAST_NAME VARCHAR(30) NOT NULL,
	PRIMARY KEY (EMPLOYEE_ID),
	FOREIGN KEY (JOB_ID) REFERENCES JOB (JOB_ID)
);

CREATE TABLE BOOKED_SERVICE (
    BOOKED_SERVICE_ID SERIAL,
	RESERVATION_ID INT NOT NULL,
	SERVICE_ID INT NOT NULL,
	EMPLOYEE_ID INT NOT NULL,
	PRIMARY KEY (BOOKED_SERVICE_ID),
	FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATION,
	FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE_TYPE,
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

CREATE TABLE CAN_DO_SERVICE (
	SERVICE_ID INT NOT NULL,
	JOB_ID INT NOT NULL,
	PRIMARY KEY (SERVICE_ID, JOB_ID),
	FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE_TYPE (SERVICE_ID),
	FOREIGN KEY (JOB_ID) REFERENCES JOB (JOB_ID)
);

CREATE TABLE PLANNED_MAINTENANCE (
	M_TYPE_ID INT NOT NULL,
	MAINT_ID SERIAL,
	START_DATE DATE NOT NULL,
	END_DATE DATE NOT NULL,
	ROOM_NR INT NOT NULL,
	EMPLOYEE_ID INT NOT NULL,
	PRIMARY KEY (MAINT_ID),
	FOREIGN KEY (M_TYPE_ID) REFERENCES MAINTENANCE_TYPE (M_TYPE_ID),
	FOREIGN KEY (ROOM_NR) REFERENCES ROOM (ROOM_NR),
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);